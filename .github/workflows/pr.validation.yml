name: "[PR] Validation"
on:
  workflow_call:
    inputs:
      CI_SKIP:
        required: true
        type: boolean
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "package.json"
      - "package-lock.json"
      - ".github/**"
      
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate dev hub
      - name: Authenticate Dev Hub
        run: |
          echo ${{ secrets.SFDX_URL_DEVHUB }} > ./SFDX_URL_DEVHUB.txt
          sfdx auth:sfdxurl:store -f ./SFDX_URL_DEVHUB.txt -a devhub -d
          rm -f ./SFDX_URL_DEVHUB.txt

      # Create scratch org
      - name: Create scratch org
        run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

      # Set SCRATCH_ORG_SFDX_AUTH_URL.txt
      # ! saves sfdx auth url as artifact to circumvent GitHub Actions censoring of the value (which occurs when used with job output)
      # ! artifact is later deleted
      - name: Set SCRATCH_ORG_SFDX_AUTH_URL.txt
        id: set-auth-url
        run: sfdx force:org:display -u scratch-org --verbose --json | jq '.result.sfdxAuthUrl' | sed 's/\"//g' > SCRATCH_ORG_SFDX_AUTH_URL.txt

      # Upload SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Upload SFDX AuthUrl
        uses: actions/upload-artifact@v2
        with:
          name: sfdx-auth-url
          path: SCRATCH_ORG_SFDX_AUTH_URL.txt

       # Install Package Utils Plugin
      - name: Install Package Utils Plugin
        run: echo y | sfdx plugins:install @dx-cli-toolbox/sfdx-toolbox-package-utils

      # Get package keys
      - name: Get package keys
        id: install-keys
        run: |
          length=$(sfdx force:package:list --json | jq -r '.result' | jq length)
          keys=""

          for (( i=1; i<=$length; i++ ))
          do  
              keys+=$i":${{ secrets.PACKAGE_KEY }} "
          done

          echo "::set-output name=keys::$(echo $keys)"

      # Install Packages in Target Org
      - name: Install Packages in Target Org
        run: sfdx toolbox:package:dependencies:install --installationkeys '${{ steps.install-keys.outputs.keys }}' --targetusername scratch-org --wait 20

  # ################################################################### #

  compile:
    name: Compile Metadata
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Download SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Download SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: actions/download-artifact@v2
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: Authenticate scratch org
        run: sfdx auth:sfdxurl:store -f ./SCRATCH_ORG_SFDX_AUTH_URL.txt -a scratch-org -s

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy

      # Deploy source to scratch org
      - name: Push source to scratch org
        run: sfdx force:source:push

  # ################################################################### #

  run-tests:
    name: Run Apex Tests
    needs: compile
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Download SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Download SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: actions/download-artifact@v2
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: Authenticate scratch org
        run: sfdx auth:sfdxurl:store -f ./SCRATCH_ORG_SFDX_AUTH_URL.txt -a scratch-org -s

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy

      # Get all test classes from current repo
      - name: Get all test classes from current repo
        id: test-classes-in-repo
        run: |
          classes=""
          cd force-app
          for p in $( grep -r -l -i --include="*.cls" "@istest" . | sed 's@.*/@@' ); do
            classes+=$(echo $p | cut -f 1 -d '.')","
          done
          echo "::set-output name=classes::$( echo $classes | sed 's/\(.*\),/\1 /' )"

      # Run Apex tests in scratch org
      - name: Run Apex tests
        if: steps.test-classes-in-repo.outputs.classes
        run: sfdx force:apex:test:run -t ${{ steps.test-classes-in-repo.outputs.classes }} -c -r human -d ./tests/apex -w 20

      # Upload Apex test results
      - name: Upload Apex test results
        if: steps.test-classes-in-repo.outputs.classes && success() || steps.test-classes-in-repo.outputs.classes && failure() # uploads tests results even if tests fail
        uses: actions/upload-artifact@v2
        with:
          name: apex-tests
          path: ./tests/apex
    outputs:
      hasTestClasses: ${{ steps.test-classes-in-repo.outputs.classes }}

  # ################################################################### #

  check-code-coverage:
    name: Validate 85% Code Coverage
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Download tests
      - name: Download tests
        if: ${{ needs.run-tests.outputs.hasTestClasses }}
        uses: actions/download-artifact@v2
        with:
          name: apex-tests
          path: ./tests/apex

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy

      # Get code coverage
      - name: Get code coverage
        id: getCodeCoverage
        if: ${{ needs.run-tests.outputs.hasTestClasses }}
        run: |
          classes=()
          cd force-app
          for p in $( grep -r -l -i --include="*.cls" "" . | sed 's@.*/@@' ); do
            class=$(echo $p | cut -f 1 -d '.')
            classes[${#classes[@]}]=$class
          done
          cd ..

          totalCovered=0
          totalLines=0

          # ! calculate code coverage for this repo only
          for row in $(jq -c -r '.[]' <<< "$(cat tests/apex/test-result-codecoverage.json)"); do
            name=$(jq -r '.name' <<< $row)
            if [[ " ${classes[@]} " =~ " ${name} " ]]; then
            
              covered=$(jq '.totalCovered' <<< $row)
              lines=$(jq '.totalLines' <<< $row)
              
              if [[ $covered != "null" && $lines != "null" && $lines != "0" ]]; then
                let totalCovered+=covered
                let totalLines+=lines
              fi
            fi
          done

          let codecoverage=totalCovered*100/totalLines
          echo "::set-output name=codecoverage::$(echo $codecoverage)"

      # Validate at least 85% code coverage
      - name: Validate at least 85% code coverage
        if: ${{ needs.run-tests.outputs.hasTestClasses }}
        run: |
          codecoverage=${{ steps.getCodeCoverage.outputs.codecoverage }}
          echo "Code coverage is $codecoverage%"

          # ! do the actual check on code coverage percentage
          if [ $codecoverage -lt 85 ]; then
            echo "Because it is less than 85%, the validation failed"
            exit 125
          else
            echo "Because it is equal or more than 85%, the validation succeeded"
          fi

  # ################################################################### #

  cleanup:
    name: Cleanup
    needs: [setup, compile, run-tests, check-code-coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate dev hub
      - name: Authenticate Dev Hub
        run: |
          echo ${{ secrets.SFDX_URL_DEVHUB }} > ./SFDX_URL_DEVHUB.txt
          sfdx auth:sfdxurl:store -f ./SFDX_URL_DEVHUB.txt -a devhub -d
          rm -f ./SFDX_URL_DEVHUB.txt

      # Download SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Download SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: actions/download-artifact@v2
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: Authenticate scratch org
        run: sfdx auth:sfdxurl:store -f ./SCRATCH_ORG_SFDX_AUTH_URL.txt -a scratch-org -s

      # Delete SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Delete SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: geekyeggo/delete-artifact@v1
        with:
          name: sfdx-auth-url

      # Delete scratch orgs
      - name: Delete scratch org
        if: always()
        run: sfdx force:org:delete -p -u scratch-org