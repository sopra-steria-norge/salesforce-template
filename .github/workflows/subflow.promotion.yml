name: "[SUBFLOW] Promote Package"
on:
  workflow_call:
    inputs:
      PACKAGE_ID:
        required: true
        type: string
    secrets:
      SFDX_URL_DEVHUB:
        required: true
      DEPLOYMENT_PAT:
        required: true

jobs:
  check-promotion:
    name: Check Promotion
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code from master
        uses: actions/checkout@v2

      # Install SFDX
      - name: Authorize SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate DevHub
      - name: Authenticate DevHub
        run: |
          echo ${{ secrets.SFDX_URL_DEVHUB }} > ./SFDX_URL_DEVHUB.txt
          sfdx auth:sfdxurl:store -f ./SFDX_URL_DEVHUB.txt -a devhub -d
          rm -f ./SFDX_URL_DEVHUB.txt

      # Check if promoted
      - name: Check if promoted
        id: check-promotion-step
        run: |
          packageName=$(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].package' -r)
          
          for package in $(sfdx force:package:version:list --packages $packageName --json --released | jq -r '.result | .[].SubscriberPackageVersionId'); do
            if [ $package == ${{ inputs.PACKAGE_ID }} ]; then
                exit 0 # ! found a released packaged, should not continue promotion

            fi
          done
          echo "::set-output name=shouldPromote::true"
    outputs:
      shouldPromote: ${{ steps.check-promotion-step.outputs.shouldPromote }}

  # ################################################################### #

  promote-package:
    name: Package
    runs-on: ubuntu-latest
    needs: check-promotion
    if: needs.check-promotion.outputs.shouldPromote
    steps:
      # Checkout source code
      - name: Checkout source code from master
        uses: actions/checkout@v2

      # Install SFDX
      - name: Authorize SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate DevHub
      - name: Authenticate DevHub
        run: |
          echo ${{ secrets.SFDX_URL_DEVHUB }} > ./SFDX_URL_DEVHUB.txt
          sfdx auth:sfdxurl:store -f ./SFDX_URL_DEVHUB.txt -a devhub -d
          rm -f ./SFDX_URL_DEVHUB.txt

      # Promote package
      - name: Promote package
        run: sfdx force:package:version:promote --package ${{ inputs.PACKAGE_ID }} --noprompt

  # ################################################################### #

  update-version-number:
    name: Update version
    runs-on: ubuntu-latest
    needs: [promote-package, check-promotion]
    if: needs.check-promotion.outputs.shouldPromote
    steps:
      # Checkout source code
      - name: Checkout source code from master
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      # Update version number
      - name: Update version number
        id: packaging-updater
        uses: navikt/github-action-sfdx-version-updater@master

      # Create commit message by extracting the latest version number from sfdx-project.json
      - name: Build commit message
        id: build-commit-message
        run: |
          echo "::set-output name=message::(CI) Updated to new version number $(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].versionNumber' -r | sed 's/.\{5\}$//')"
          cat sfdx-project.json

      # The main branch is protected, needs a PRs
      - name: Create new branch and pull request for updated package version ID
        uses: peter-evans/create-pull-request@v3
        with:
          title: "[CI] Added new package version ID"
          commit-message: ${{ steps.build-commit-message.outputs.message }}
          branch: "CI/package-version-update"
          token: ${{ secrets.GITHUB_TOKEN }}

      # Merge pull request
      - name: Merge pull request
        uses: juliangruber/merge-pull-request-action@v1
        with:
          # ! USES CUSTOM PAT TO INITIATE STATUS CHECKS (SEE "Require status checks to pass before merging" IN BRANCHES SETTINGS IN REPO)
          github-token: ${{ secrets.DEPLOYMENT_PAT }}
          number: ${{ env.PULL_REQUEST_NUMBER }}
          method: squash

  # ################################################################### #

  github-release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [promote-package, check-promotion]
    if: needs.check-promotion.outputs.shouldPromote
    steps:
      # Checkout source code
      - name: Checkout source code from master
        uses: actions/checkout@v2
        with:
          persist-credentials: true # ! set to true to be able to checkout correctly
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      # Authorize SFDX
      - name: Authorize SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate DevHub
      - name: Authenticate DevHub
        run: |
          echo ${{ secrets.SFDX_URL_DEVHUB }} > ./SFDX_URL_DEVHUB.txt
          sfdx auth:sfdxurl:store -f ./SFDX_URL_DEVHUB.txt -a devhub -d
          rm -f ./SFDX_URL_DEVHUB.txt

      # Set release variables
      - name: Set release fields
        id: release-fields
        run: |
          echo "::set-output name=tagName::v$(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].versionNumber' -r | sed 's/.\{5\}$//')"
          echo "::set-output name=releaseName::$(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].versionNumber' -r | sed 's/.\{5\}$//')"
          echo "::set-output name=bodyVersion::$(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].versionNumber' -r | sed 's/.\{5\}$//')"
          echo "::set-output name=codeCoverage::$( sfdx force:package:version:report -p ${{ inputs.PACKAGE_ID }} --json | jq '.result.CodeCoverage.apexCodeCoveragePercentage' -r )"

      # Generate changelog from commits
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v3.0.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      # create github release
      - name: Create GitHub Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release-fields.outputs.tagName }}
          release_name: ${{ steps.release-fields.outputs.releaseName }}
          body: |
            **Version**: ${{ steps.release-fields.outputs.bodyVersion }}
            **Package ID**: ${{ inputs.PACKAGE_ID }}
            **Code Coverage**: ${{ steps.release-fields.outputs.codeCoverage }}%

            **Created By**: [${{ github.actor }}](https://github.com/${{ github.actor }})

            ## Changelog

            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
